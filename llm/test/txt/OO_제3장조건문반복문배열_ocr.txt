<0>파워자바(개정3 판) 3장 조건문, 반복문, 배열 <1>3장의 목표 1. 조건에 따라 서로 다른 문장을 실행하는 코드를 만들 수 있나요? 2. 조건에 따라서 반복하는 코드를 만들 수 있나요? 3. 자바에서 배열을 생성하고 배열 안에 값을 저장할 수 있나요? 4. 자바에서 2차원 배열을 생성하고 사용할 수 있나요? 5. ArrayList를 생성하고 값을 저장할 수 있나요? <2>if-else 문 조건에따라서서로다른 처리를 하고싶을 때 사용하는 구조가 if- else 문이다. 2만원 이상인가? 」 SALE 거짓 참 거짓 상품의 가격 > 20000 20000 Price 참 배송비 = 0 배송비 = 3000 배송비 = 0 배송비 = 3000 그림 3.1 조건문을 순서도로 그린 것이다. <3>if-else 문의 구조 Syntax: if-else 문 참이나 거짓으로 계산되는 조건식 if (price > 20000) 조건식이 참이면 실행되는 문장 shipping cost = 0: else 조건식이 거짓이면 실행되는 문장 else절은 생략될 shipping cost = 3000; 수도 있다. <4>예제: 짝수와 홀수 구별하기 키보드에서 입력받은 정수가 홀수인지 짝수인지를 말해주는 프로그램을 작성하여 보자. 홀수와 짝수는 어떻게 구 별할 수 있는가? 홀수는 2로 나누었을 때 나머지가 1이다. 짝수는 2로 나누었을 때 나머지가 0이다. 따라서 나머 지 연산자 %를 이용하여 구별할 수 있다. 정수를 입력하시오: 2 실행 결과 입력된 정수는 짝수입니다. <5>예제: 짝수와 홀수 구별하기 EvenOdd.java 01 import java.util.Scanner: 02 03 public class EvenOdd { 04 public static void main(String[] args) { 05 int number; 06 07 Scanner SC = new Scanner (System.in); 08 System.out.prirt(" 정수를 입력하시오: " ); 09 number = sc.nextInt(); 10 number을 2로 나누어서 0이면 짝수이다. 11 if (number % 2 == 0) { 12 System.out.println("입력된 정수는 짝수입니다. "); 13 } else { 14 System.out.print1n("입력된 정수는 홀수입니다. "); 15 } 16 } 17 } <6>다중 if-else 문 Nested.java 01 import java.util.Scanner ; 02 03 public class Nested { 04 public static void main(String[] args) { 05 06 Scanner SC = new Scanner(System.in) ; 07 ("정수를 입력하시오: " System.out.print '); 08 int number = sc.nextInt(;; 09 if(number > 0 ) 10 System.out.print]n("양수입니다. "); 다중 if-else문이라고 한다. 11 else if (number ==0 ) 12 System.out.print1n("0입니다. "); 13 else 14 System.out.print]n("음수입니다. "); 15 } 16 } 정수를 입력하시오: 10 양수입니다. <7>예제: 학점 결정 종종 우리는 조건에 따라서 다중으로 분기되는 결정을 내려야 하는 경우가 있다. 학생들의 성적을 받아서 학점을 출력하는 프로그램을 작성하여 실행하여 보자. 성적이 90점 이상이면 A학점, 80점 이상이고 90점 미만이면 B학 점, 70점 이상이고 80점 미만이면 C학점과 같이 결정하는 것이다. 성적을 입력하시오: 92 학점 A <8>예제: 학점 결정 01 import java.util.Scanner; 02 03 public class Grading { 04 public static void main(String[ ] args) { 05 int score; 06 07 Scanner SC = new Scanner(System.in) ; 08 System.out.print ("성적을 입력하시오: '); 09 score = sc.nextInt (); 문장 2에서 if( grade >= 80 && grade <90) 10 if (score >= 90) 1 이라고 할 필요가 없음에 유의하라. grade가 90 보다 크거나 같은 경우에는 앞의 문장 1에서 이미 11 System.out.prirtln("학점 A"); 걸렸기 때문이다. 12 else if (score >= 80) 2 13 System.out.print1n( "학점 B"); 14 else if (score >= 70) 15 System.out.print1n("학점 C"); 16 else if (score >= 60) 17 System.out.print1n( "학점 D"); 18 else 19 System.out.print1n( "학점 F"); 20 21 } 22 } <9>예제: 가위, 바위, 보게임 가위, 바위, 보 게임을 작성하여 보자. 텍스트 버전은 여기서 작성하고 그래픽 버전은 8장에서 작성해보자. 사용자 가 가위, 바위, 보 중에서 하나를 선택하면 이것을 컴퓨터가 생성한 난수값과 비교한다. 누가 이겼는지를 화면에 출력한다. 가위(0), 바위(1), 보(2): 1 인간: 1 컴퓨터: 0 인간 승리 <10>예제: 가위, 바위, 보게임 01 import java.util.*; 02 03 public class RockPaperScissor { 04 final int SCISSOR = 0; 05 final int ROCK = 1; 06 final int PAPER = 2; 07 08 public static void main(String[] args) { 09 Scanner SC = new Scanner(System.in); 10 System.out.print("가위(0), 바위(1), 보(2): "); 11 int user = sc.nextInt(); 12 13 int computer = (int) (Math.random( ) * 3); 14 if( user == computer ) 15 System.out.print]n("인간과 컴퓨터가 비겼음"); 16 else if (user == (computer + 1) % 3) 17 // 0은 1한테 지고 1은 2한테, 2는 0한테 진다. 18 System.out.prirtln("인간: " + user + " 컴퓨터: " + computer + 19 " 인간 승리"); 20 else " " " 21 System.out.prirtln("인간: + user + 컴퓨터: + computer + " 컴퓨터 승리"); 22 23 } 24 } <11>중간점검 1. 자바에서 참과 거짓은 무엇으로 표시되는가? 2. 조건에 따라서 실행되어야 하는 문장이 두 개 이상이면 어떻게 하여야 하는가? 3. 실수와 실수를 비교할 때 주의해야 할 점은 무엇인가? 4. 수식 (!true)의 값은? 5. 다음 코드는 어떤 오류를 가지고 있는가? if (x=1) { System.out.pri.ntln("x는 1입니다. "); } 6. 속도가 60km/h 이상이고 100km/h 이하이면 "정상 속도"라고 출력하는 코드를 작성해보자. 7. x와 y 중에서 큰 값을 max에 저장하고 작은 값을 min에 저장하는 코드를 작성해보자. <12>switch 문 Syntax: switch 문 switch(제어식) { case c1: 제어식의 값이 c1이면 실행된다. 문장1 ; break; case c2: 제어식의 값이 c2이면 실행된다. 문장2; break; default: 일치하는 값이 없으면 실행된다. 문장d ; break; } <13>예제: 학점 결정 사용자가 자신의 성적을 입력하면 성적을 학점으로 변환하여 출력해주는 프로그램을 작성하여 보자. 이것은 앞에 서 if-else 문장으로도 작성한 바 있다. if-else 문장을 사용하는 방법과 비교하여 보자. 성적을 입력하시오: 92 학점: A <14>예제: 학점 결정 01 import java.util.* 02 03 public class Score2Grade { 04 public static void main(String[] args) { 05 int score, number; 06 char grade: 07 08 Scanner SC = new Scanner(System.in) ; 09 System.out.print ("성적을 입력하시오: ); 정수 10으로 나누어서 소수점 이하를 없앤다. 10 score = sc.nextInt(); 11 number = score / 10; 12 switch (number) { 13 case 10: 14 case 9: grade = 'A'; break; 15 case 8: grade = 'B'; break; 16 case 7: grade = 'C'; break; 17 case 6: grade = 'D'; break; 18 default: grade = 'E'; break; 19 } 20 System.out.prirt("학점: " + grade); 21 } 22 } <15>switch 문에 문자열 사용 Java 7부터는 switch 문의 제어식으로 String 객체를 사용할 수있다. 01 String S = "yes"; 02 switch(s) { 03 case "yes": 04 break; 05 case "no": 06 break; 07 } <16>예제: 피자 종류을 받아서 피자의 가격을 반환하는 프로그램을 작성해보자. 피자 종류를 입력하시오: 콤비네이션 피자 콤비네이션의 가격=20000 <17>예제: StringSwitch.java 01 import java.util.Sanner; 02 03 public class StringSwitch { 04 public static void main(String[] args) { 05 Scanner SC = new Scanner(System.in) : 06 System.out.print("피자 종류를 입력하시오: "); 07 String model = sc.next(;; 08 int price=0: 09 switch (model) { 10 case "콤비네이션": 11 case "슈퍼슈프림": price = 20000; break; 12 case "포테이토": price = 15000; break; 13 case "쉬림프": price = 25000; break; 14 default: price = 0; break; 15 } 16 System.out.println("피자 " 가격="+price); +model+"의 17 } 18 } <18>향상된 switch 문 Java 12부터는 "화살표"를 사용하는 향상된 switch 문을 사용할 수 있다. case->S "과 같은 형식을 사용한다. 01 public class Test { 02 public static void main(String[] args) { 03 var day = "SAT"; 04 var today = ; 05 switch (day) { 06 case "SAT" , "SUN" -> today = "주말" ; 07 case "MON", "TUS" , "WED", "THU", "FRI" -> today = "주중" ; 08 default -> System.out.pri.ntln("Error"); 09 } 10 System.out.println(today); 11 } 12 } 주말 <19>중간점검 1. 다음 중에서 switch 문의 제어식으로 사용할 수 없는 것은? 1정수 10 2 문자 'a ' 3 문자열 "abc" 4 실수 3.14 2. 자바에서 다중 선택 구조를 만드는 2가지 방법을 이야기해보자. 3. x=1, y=2, z=3일 때, 다음 코드를 수행한 후의 X, y, z의 값은 얼마인가? switch(x) { case 0: z=x+1; break; case 1: y=z+x; break: default: z=z+x; } 4. 3번 코드를 →을 사용하는 새로운 switch 구문으로 작성해보자. <20>for 문 배송비=0 for( 초기식: 조건식; 증감식 ){ 거짓 조건식 작업 문장; 참 } 배송비=0 배송비 = 0 <21>for 문 Syntax: for 문 초기식 조건식 증감식 for( int i=0; i<10; i++ ) { printf("Hello World!"); } 반복되는 문장, 콘솔에 "Hello World!"가 10번 반복된다. <22>예제: 0부터 4까지 출력하기 다음 프로그램은 for를 사용하여 0부터 4까지의 숫자를 화면에 출력한다. i의 값은: 0 i의 값은: 1 i의 값은: 2 i의 값은: 3 i의 값은: 4 <23>예제: 0부터 4까지 출력하기 ForExample1 01 public class ForExample1 { 02 public static void main(String[] args) { for 문 안에서 제어 변수를 선언할 수 있다. 03 for (int i = 0; i < 5; i++) { 04 System.out.prirtln("i의 값은: " + i); 05 } 06 } 07 } <24>예제: 정수의합 계산하기 예제 3-7 정수의 합 계산하기| 간단한 예로 1부터 10까지의 정수를 더하여 합을 구하는 프로그램을 살펴보자. 1부터 10까지의 정수의 합 = 55 Sum.java 01 public class Sum { 02 public static void main(String[] args) { 03 int sum = 0; 04 05 for (int i = 1; i<= 10; i++) for 문 안의 초기식에서 제어 변수를 선언할 수 있다. 6 sum += i; 07 08 System.out.prirtf("1부터 10까지의 정수의 합 = %d＼n", sum); 09 10 } 11 } <25>예제: 팩토리얼 계산하기 이번 예제에서는 팩토리얼 값을 계산하여 보자. 팩토리얼이란 다음과 같이 정의된다. n!= 1 X 2 x 3 X ··· X n 정수를 입력하시요: 20 20!은 2432902008176640000입니다. <26>예제: 팩토리얼 계산하기 Factorial.java 01 import java.util. 02 03 public class Factorial { 팩토리얼의 값은 생각 보다 아주 커질 수 04 public static void main(String[] args) { 있다. long으로 선언한다. 여기서 fact 의 초기값은 반드시 1이어야 한다. 0이 05 long fact = 1; 면안 된다. 왜냐하면 팩토리얼은 정수를 06 int n; 전부 곱해서 계산하는 것이므로 초기값 07 이 0이면 결과는 0이 되어 버린다. 따라 서 반드시 1로 초기화를 시켜야 한다. 08 System.out.printf(" 정수를 입력하시요: "); 09 Scanner scan = new Scanner(System.in) ; 10 n = scan.nextInt( ) 11 12 for (int i = 1; i <= n; i++) 13 fact fact * i; = 14 15 System.out.printf("%d!은 %d입니다. ＼n", n, fact); 16 17 } 18 } <27>예제: 약수 계산하기 사용자로부터 양의 정수를 입력받아서 그 정수의 모든 약수를 출력하는 프로그램을 작성하여 보자. 양의 정수를 입력하시오: 100 100의 약수는 다음과 같습니다. 1 2 4 5 10 20 25 50 <28>예제: 약수 계산하기 Divisor.java 01 import java.util.Sanner; 02 03 public class Divisor { 04 public static void main(String[] args) { 05 Scanner scan = new Scanner(System.in) ; 06 System.out.print ("양의 정수를 입력하시오: "); 07 int n = scan.nextInt( ; 08 09 System.out.println(n + "의 약수는 다음과 같습니다. "); 10 for (int i = 1; i <= n; ++1) { 11 if (n % i == 0) 12 System.out.print(" " + i); 13 } 14 } 15 } <29>중간 점검 1. 다음 중에서 switch 문의 제어식으로 사용할 수 없는 것은? 1정수 10 2 문자 , a , 3 문자열 "abc" 4 실수 3. 14 2. 자바에서 다중 선택 구조를 만드는 2가지 방법을 이야기해보자. <30>while 문 10번 이하 | 인가요? 거짓 조건식 거짓 참 참 문장 <31>while 문 Syntax: while 문 조건식 while( i < 10 ) printf("Hello World!＼n"); 조건식이 참이면 문장을 반복실행한다. <32>예제: "환영합니다."를 화면에 5번 출력하는 예제 WelcomeLoop.java 01 public class WelcomeLoop { 02 public static void main(String[] args) { 03 int i = 0; 04 while (i < 5) { 05 System.out.println("환영합니다!"); 06 i++; 07 } 08 System.out. println("반복이 종료되었습니다. "); 09 } 10 } 환영합니다! 환영합니다! 환영합니다! 환영합니다! 환영합니다! 반복이 종료되었습니다. <33>예제: -1의 값이 입력될 때까지 합계 계산하기 while 문은 조건으로 반복할 때 사용된다. -1의 값이 입력될 때까지, 사용자가 입력한 정수의 합계를 계산하여 출 력하는 프로그램을 작성해보자. 정수를 입력하시오: 10 정수를 입력하시오: 20 정수를 입력하시오: 30 정수를 입력하시오: -1 정수의 합은 60입니다. <34>예제: -1의 값이 입력될 때까지 합계 계산하기 GetSum. java 01 import java.util.Sanner; 02 03 public class GetSum { 04 public static void main(String args[]) { 05 Scanner SC = new Scanner(System.in) : 06 int sum = 0, value = 0; 07 value가 -1이 아니면 08 while (value != -1) { 덧셈을 반복한다. 09 sum = sum + value; 10 System.out.prirt(" 정수를 입력하시오: !! ) ; 11 value = sc.nextInt (); 12 } 13 System.out.print1n( "정수의 합은 " + sum+"입니다. "); 14 15 } 16 } <35>do-while 문 Syntax: while 문 do { 반복 문장 문장1; 문장2; while (조건) 조건이 참이면 반복을 계속한다. <36>예제: 정확한 입력받기 사용자로부터 월의 번호를 입력받는 프로그램을 작성하여 보자. 사용자가 올바른 월 번호를 입력할 때까지 반복을 계속한다. 사용자가 올바른 월 번호를 입력해야만 다음 문장으로 넘어간다. 올바른 월을 입력하시오 [1-12]: 13 올바른 월을 입력하시오 [1-12]: 14 올바른 월을 입력하시오 [1-12]: 0 올바른 월을 입력하시오 [1-12]: 1 사용자가 입력한 월은 1 <37>예제: 정확한 입력받기 CheckInput.java 01 import java.util.Scanner; 02 03 public class CheckInput { 04 public static void main(String args[]) { 05 Scanner SC = new Scanner(System.in) : 06 int month; 07 do { 08 System.out.prirt( "올바른 월을 입력하시오 [1-12]: "); 09 month = sc.nextInt ( ) ; 10 } while (month < 1 Ⅱ month > 12); 11 System.out.print]n("사용자가 입력한 월은 " + month); 12 } 13 } <38>중첩 반복문 · 반복문은 중첩되어 사용될 수 있다. 즉반복문 안에 다른 반복문이 실 행될 수 있다. 이러한 형태를 중첩 반복문(nested loop)이라고 한다. for(int i=0; i<5; i++) { 외부 반복문 for(int k=0; k<5; k++) { 내부 반복문 반복문장; } } <39>예제: 사각형 모양출력하기 중첩 반복문은 실제 프로그래밍에서 많이 나오는 형태로 특히 사각형과 비슷한 데이터를 처리하는데 유용하다. 다 음 예제는 *기호를 사각형 모양으로 출력한다. ********** ********** ********** ******** * ******** <40>예제: 사각형 모양출력하기 NestedLoop.java 01 import java.util. *. 02 03 public class NestedLoop { 04 public static void main(String[] args) { 위의 프로그램을 실행하면 50개의 *가 05 화면에 8 x 4=의 정사각형 모양으로 출 06 for (int y = 0; y < 5; y++) { 력된다. *를 출력하는 문장의 외부에는 두개의 for 루프가 중첩되어 있다. 외부 07 for (int x = 0: X < 10: x++) 의 for 루프는 변수 y를 0에서 4까지 증 08 System.out.print("*"); 가시키면서 내부의 for 루프를 실행시킨 09 다. 내부의 for 루프는 변수 x를 0에서 9 까지 증가시키면서 print() 메소드를 호 10 System.out.println(""); 출한다. 내부 for 루프가 한번 실행될 때 11 } 마다 화면에는 한 줄의 *가 그려진다. 내 12 부 for 루프가 한 번씩 종료될 때마다 줄 바꿈 문자가 화면에 출력되어 다음 줄로 13 } 넘어가게 된다. 14 } <41>break 문, continue 문 01 for(int i=1; i<6; i++) { 02 if(i==4) 03 break: // 4이면 반복문을 벗어난다. 04 System.out.println(i); 05 } 1 2 3 01 for(int i=1; i<6; i++) { 02 if(i==4) 03 continue: // 4일때는 출력하지 않고 다음 반복으로 넘어간다. 04 System.out.println(i); 05 } 12356 <42>무한루프 while 문을 사용할 때, 종료 조건을 만들려면 상당히 까다로운 경우가 있다->이 경우에는 while(true)를 이용하여 무한 루프를 만들고 무한 루프 안에서 break를 사용하여서 루프를 빠져나가는 조건을 기술하 는 편이 가독성이 높고 코딩하기 쉽다 while( true ) { while( c!='q' II count > 100 ) { if( c=='q' ) break; if( count > 100 ) break; } <43>예제: 사용자가 입력한 점수들의 평균을 내는 프로그램을 작성한다. 만약 사용자가 음수를 입력하면 break에 의하여 반 복 루프가 종료되게 한다. 점수를 입력하시오: 10 점수를 입력하시오: 20 점수를 입력하시오: -1 평균은 15 <44>예제: Averager,ava 01 import java.util. *: 02 03 public class Averager { 04 public static void main(String[] args) { 05 int total = 0, count = 0; 06 Scanner SC = new Scanner (System.in); 07 08 while (true) { 09 System.out.prirt("점수를 입력하시오: ); 10 int grade = sc.nextInt ( ) ; 11 if (grade < 0) break; 12 total += grade: 13 count++; 14 } 15 System.out.print1n( "평균은 " + total / count); 16 } 17 } <45>중간점검 1. do-while 문에서 반복 조건이 거짓이면 몇 번이나 반복되는가? 2. do-while을 이용하여 사용자가 'q'를 입력할 때까지 정수의 합계를 계산하는 프로그램을 작성해보자. 3. 중첩 반복문을 이용하여서 구구단을 2단부터 9단까지 출력하여 보자. 4. for(;;) i=i+1; 은 몇 번이나 반복하는가? 5. 1부터 100 사이의 정수에서 6의 배수의 합을 계산하는 프로그램을 작성해보자. <46>배열 ● 배열(array)은 여러 개의 변수를 하나로 묶어 넣은 것이다. 배열을 사 용하면 같은 종류의 대량의 데이터를 한 번에 선언할 수 있다. s5 s3 s9 s2 s7 s0 S4 s1 s6 s8 배열은 동일한 타입의 데이터를 여러 개 배열은 변수들을 모아놓은 것 저장할 수 있는 저장 장소입니다. 배열은 하나의 이름을 공유한다. s[0] s[1] s[2] s[3] s[4] s[5] s[ 6] s[7] s[8] s[9] int[] S = new int[10]; <47>배열의 선언과 사용 ● 배열 참조 변수부터 다음과 같이 선언한다. 정수형 배열을 만든다면 배열 참조 변수는 int타입으로 선언하면 된다. int[] s; 배열의 자료형 배열의 이름 <48>배열의 선언과 사용 ● 실제 배열은 new 연산자를 사용하여서생성하여야 한다. 10개의 int형 변수 r[0] r[1] r[2] r[8] r[9] S = new int [10]; 참조 변수 배열의 크기 r <49>반복문과 배열 배열의 각각의 요소는 인덱스(index)라는 번호로 접근할 수 있다. ArrayTest1.java 01 public class ArrayTest1 { 02 public static void main(String[] args) { 03 04 int[] S = new int[10]; 크기가 10인 배열 생성 05 06 for (int i = 0; i < s.length; i++) { 07 s[i] = i; 08 } i번째 요소에 i를 저장 09 반복문을 이용하여서 배 10 for (int i = 0; i < s.length; i++) { 열의 요소를 출력 한다. 배열의 크기는 s.length 11 System.out.print(s[i] + " "); 로알수 있다. 12 } 13 } 14 } 0123456789 <50>배열의 크기 ● 배열 이름이 s라면 s.length 가 배열의 크기가 된다. S length 4 배열 객체 <51>배열의 초기화 ArrayTest3.java 01 public class ArrayTest3 { 02 public static void main(String[] args) { 각 배열은 length라는 필드를 03 int[] scores = { 10, 20, 30. 40, 50 }; 가지고 있다. length 필드는 04 for (int i = 0: i < scores.length; i++) 배열의 크기를 나타낸다. 따라 서 이것을 이용하면 배열의 크 05 System.out.print(scores「i1+" "); 기만큼 반복을 시킬 수 있다. 06 } 07 } 10 20 30 40 50 <52>for-each 루프 Syntax: for-each 문 int[] list = { 1, 2, 3, 4, 5 }; 변수 배열 for(int e : list) { System.out.println(e); } <53>예제: ● 정수형 배열을 작성하고 for-each 루프로 배열에서 정수를 하나씩 꺼 내서 화면에 출력하여 보자. ArrayTest4.java 01 public class ArrayTest4 { 02 public static void main(String[] args) { 03 int[] numbers = { 10, 20, 30 }; 변수 value에는 첫 번째 요소부터 마지막 04 for (int value : numbers) 배열 요소까지 차례대로 대입된다. 05 System.out.print(value+ "); 06 } 07 } 10 20 30 <54>예제: 문자열배열 앞에서는 정수 배열만을 살펴보았는데 실수 배열이나 문자열의 배열도 얼마든지 생성하여 사용할 수 있다. 여기 서는 5가지의 피자 토핑의 종류를 문자열 배열에 저장하고 배열에 저장된 문자열을 꺼내서 화면에 출력하여 보자. for-each 루프를 사용해보자. Pepperoni Mushrooms Onions Sausage Bacon PizzaTopping.java 01 public class PizzaTopping { 02 public static void main(String[] args) { 03 04 String[] toppings = { "Pepperoni", "Mushrooms" "Onions "Sausage", 05 "Bacon" }; 06 07 for (String s: toppings) { 08 System.out.print(s + ); 09 } 10 } 11 } <55>중간점검 1. 10개의 부동소수점 난수를 저장하는 배열 faarray를 선언하고 생성하는 코드를 작성하라. 2. 배열의 크기는 어떻게 알 수 있는가? 3. 1번 문제의 farray를 for-each 구문으로 방문해서 출력하는 코드를 작성하라. 4. 1번 문제의 배열 farray에 저장된 값들의 합계를 계산하여 출력하는 코드를 작성하라. <56>2차원 배열 1열 2열 3열 4열 5열 1행 s[0][0] s [0] [1] s[0][2] s[0][3] s[0][4] int[][] S = new int[3] [5]; 2행 s[1] [0] s [1] [1] s [1] [2] s [1] [3] s[0][4] 2개의 대괄호가 행의 개수 열의 개수 3행 2차원 배열을 나타낸다. s [2] [0] s [2] [1] 's[2][2] s [2] [3] s[0][4] <57>2차원 배열과 중첩된 루프 01 for (int i=0; i <3; i++) 02 for(int j=0; j<5; i++) 03 System.out.pri.ntln(s[i][j]); 01 int[ ][] testArray = { 02 {10, 20, 30, 03 {40, 50, 60}, 04 {70, 80, 90} 05 }; 2차원 배열의 초기화 <58>예제: 극장 관객 수 계산 극장에 앉아있는 관객들을 2차원 배열로 나타낼 수 있다. 관객이 있는 좌석은 1로, 관객이 없는 좌석은 0으로 나 타낸다. 현재 극장에 앉아있는 관객들의 수를 세는 프로그램을 작성해보자. 현재 관객 수는 7명입니다. <59>예제: 극장 관객 수 계산 TheaterSeats.java 01 public class TheaterSeats { 02 public static void main(String[] args) { 03 04 int [][] seats = { {0, 0, 0, 1,1, 0, 0, 0,0, 0}, 05 {0, 0, 1,1,0, 0, 0, 0,0, 0}, 06 {0,0,0,0,0, 0, 1, 1, 1,0} }; 07 int count=0; 08 for (int i = 0; i < seats.length; i++) 09 for (int k = 0: k < seats [i].length; k++) 10 count += seats[i][k]; 11 ("현재 관객 수는 " ") 12 System.out.print +count+"명입니다. ; 13 } 14 } <60>래그드 배열 int[ ][] ragged = new int 「MAX ROWS+1][]; for(int r=0; r<=MAX ROWS; r++) ragged[r] = new int[r+1]; IF_ s[0][0] s[0] 1 s[1] s[1][0] s[1][1] s[2] 1 2 s[2][0] s[2][1] s[2][2] <61>래그드 배열 RaggedArray.java 01 public class RaggedArray { 02 public static void main(String[] args) { 03 04 int[][] ragged = new int[3][]; 05 ragged[0] = new int[1]; 06 ragged[1] = new int[2]; 07 ragged[2] = new int[3]; 08 09 for (int r = 0; r < ragged.length; r++) 10 for (int C = 0; c < ragged[r].length; C++) 11 ragged[r][c] = c; 12 } 13 } 14 } <62>예제: 래그드 배열 생성 다음과 같은 래그드 배열을 생성해보자. 1 2 3 arr 4 5 6 7 8 9 <63>예제: 래그드 배열 생성 RaggedArray2.java 01 import java.util.Aravs; 02 03 public class RaggedArray2 04 ~ 05 public static void main(String[] args) 06 { 07 int[][] rarray = new int[3][]; 초기값으로 배열을 생성하는 문장이다. 08 09 rarray [0] = new int[] {1,2,3,4}; 10 rarray [1] = new int[] { 5, 6, 7 }; 1차원 배열은 이런 방법으로 11 rarray[2] = new int[] {8,9}; 도 출력할 수 있다. 2차원 배 12 열을 이런 방법으로 출력하 면 참조값만 나온다. 13 for (int[ ] row: rarray) { 14 System.out.pri.ntln(Arrays.toString(row)); 15 } 16 } 17 } [1, 2, 3, 4] [5,6,7] [8, 9] <64>중간점검 1. 다음의 배열 선언 중에서 잘못된 것을 모두 고르시오. 1 int[] a = int[10]; 2 int[] a = new int[10]; 3 int all= int[10]: 4 int a[] = new int[10]; 5 int[] a = {1, 2, 3, 4, 5 }; 2. double형의 데이터를 저장하는 3×4 크기의 2차원 배열을 생성하라. 3. 초기값을 이용하여 다음과 같은 래그드 배열을 생성하는 코드를 작성하라. 0 12 1 32 12 38 2 14 6 3 3 <65>ArrayList 자바에서는 ArrayList 라는 클래스를 제공하는데, 이 클래스를 사용하 면배열의 크기를 동적으로 변경하면서 사용할 수 있다. ArrayList list 1 2 String String String "Buy bread" "Sell car" 10:30 meeting <66>ArrayList ArrayList에 저장할 자료형 문자열을 저장하는 Syntax: ArrayList 클래스 ArrayList 참조 변수 선언 ArrayList<String list: list = new ArrayList<>(); ArrayList 생성 list.add("Apple"); list.add("Grape"); <67>예제: 친구들의 리스트 ArrayListTest.java 01 import java.util. 02 03 public class ArrayListTest { 04 public static void main(String args []) { 05 06 ArrayList<String> list = new ArrayList<>(); 07 list.add ("철수"); 08 list.add ("영희"); 09 list.add("순신"); 10 list.add("자영"); 11 for (String obj : list) 12 System.out.print(obj + " "); 13 } 14 } 철수 영희 순신 자영 <68>Mini Project: 숫자 추측 게임 이 예제는 프로그램이 가지고 있는 정수를 사용자가 알아맞히는 게 임이다. 사용자가 답을 제시하면 프로그램은 자신이 저장한 정수와 비교하여 제시된 정수가 더 높은지 낮은지 만을 알려준다 정답을 추측하여 보시오: 10 제시한 정수가 낮습니다. 정답을 추측하여 보시오: 30 제시한 정수가 낮습니다. 정답을 추측하여 보시오: 60 제시한 정수가 높습니다. 정답을 추측하여 보시오: 59 축하합니다. 시도횟수=4 <69>Summary 조건문은 조건에 따라 여러 실행 경로로 분기하는 구조로서 if-else 문, switch 문이 있다. break 문은 현재의 반복을 중단하고 반복 루프를 빠져나갈 때 사용한다. switch 문의 case 절에는 정수, 문자, 문자열이 올 수 있다. 반복문은 조건에 따라 문장을 반복하여 실행하는 구조로서 for 문, while 문 이 있다. do-while 문은 문장을 무조건 한번 실행한 후에 조건을 검사하여 반복한다. 반복문안에 다른 반복문을 둘 수 있다. 배열은 같은 자료형의 데이터를 여러 개 순차적으로 저장하는 자료 구조이 다. 자바에서 배열은 객체이다. 자바에서 배열을 생성하려면 먼저 참조 변수부터 선언한다. 참조 변수는 배 열 객체의 주소를 저장하는 변수이다. 이어서 배열을 생성하여 저장 공간을 확보한다. 정수 3개를 저장하는 배열은 int[] a = new int[4]; 와 같이 만든다. 배열의 크기는 배열 객체의 length 필드에 저장된다. <70>Q&A ~~~~~~ 