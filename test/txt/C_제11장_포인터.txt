
<0>
제11장포인터
<1>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved이번장에서학습할내용
•포인터이란 ?
•변수의 주소
•포인터의 선언
•간접참조연산자
•포인터 연산
•포인터와 배열
•포인터와 함수이번장에서는
포인터의 기초적인
지식을 학습한다 . 
<2>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved포인터란 ?
포인터 (pointer): 주소를 가지고 있는변수

<3>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved변수에어디에저장되는가 ?
변수는 메모리에 저장된다 .
메모리는 바이트 단위로 액세스된다 .
첫번째 바이트의 주소는 0, 두번째 바이트는1,…

<4>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved변수와메모리
변수의 크기에 따라서 차지하는 메모리 공간이 달라진다 .
char형변수: 1바이트 , int형변수: 4바이트,…
intmain( void)
{
inti = 10;
charc = 69;
float f = 12.3;
}

<5>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved변수의주소
변수의 주소를 계산하는 연산자 : &
변수 i의주소: &i

<6>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved변수의주소
intmain( void)
{
inti = 10;
char c = 69;
float f = 12.3;
printf( "i의주소: %u\n", &i); // 변수 i의주소출력
printf( "c의주소: %u\n", &c); // 변수 c의주소출력
printf( "f의주소: %u\n", &f); // 변수 f의주소출력
return 0;
}
i의주소:1245024
c의주소:1245015
f의주소:1245000
<7>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved포인터의선언
포인터 : 변수의 주소를 가지고 있는변수

<8>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved절대주소사용
아두이노와 같은임베디드 시스템에서는 가능
윈도우에서는 안됨
int*p = ( int*)10000;

<9>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved포인터와변수의연결
inti= 10; // 정수형 변수 i선언
int*p; // 포인터 변수 p 선언
p = &i; // 변수 i의주소가 포인터 p로대입

<10>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved다양한포인터의선언
char c = 'A'; // 문자형변수 c
float f = 36.5; // 실수형변수 f
double d = 3.141592; // 실수형변수 d
char *pc = &c; // 문자를가리키는 포인터 pc
float *pf= &f; // 실수를가리키는 포인터 pf
double *pd= &d; // 실수를가리키는 포인터 pd

<11>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved예제
#include < stdio.h >
intmain(void)
{
inti= 10;
double f = 12.3;
int*pi = NULL;
double *pf = NULL;
pi = &i;
pf = &f;
printf (“%u %u \n”, pi, & i);
printf (“%u %u \n”, pf, &f);
return 0;
}
1768820 1768820
1768804 1768804
<12>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved간접참조연산자
간접참조연산자 *: 포인터가 가리키는 값을가져오는 연산자
inti=10;
int*p;
p =&i;
printf (“%d”, *p):

<13>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved간접참조연산자의해석
간접참조연산자 : 지정된 위치에서 포인터의 타입에 따라값을읽어
들인다 .
int*p = 8; // 위치 8에서정수를 읽는다 . 
char *pc = 8; // 위치 8에서문자를 읽는다 . 
double *pd = 8; // 위치 8에서실수를 읽는다 . 

<14>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved& 연산자와 * 연산자
& 연산자 : 변수의 주소를 반환한다
* 연산자 : 포인터가 가리키는 곳의내용을 반환한다 . 

<15>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved포인터예제#1
#include < stdio.h >
intmain(void)
{
inti= 3000;
int*p=NULL;
p = & i;
printf ("i= %d\n", i); // 변수의 값출력
printf ("&i= %u\n\n", & i);// 변수의 주소출력
printf ("p = %u \n", p); // 포인터의 값출력
printf ("*p = %d \n", *p); // 포인터를 통한간접참조값출력
return 0;
}3000
ip
i= 3000
&i= 1245024
*p = 3000
p = 1245024
<16>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved포인터예제#2
#include <stdio.h >
intmain( void)
{
intx=10, y=20 ;
int*p;
p = &x;
printf ("p = %d \n", p);
printf ("*p = %d \n\n", *p);
p = &y;
printf ("p = %d \n", p);
printf ("*p = %d \n", *p);
return 0;
}20
yp10
x
p = 1245052
*p = 10
p = 1245048
*p = 20
<17>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved포인터예제#3
#include <stdio.h >
intmain( void)
{
inti=10;
int*p;
p = & i;
printf ("i= %d\n", i);
*p = 20;
printf ("i= %d\n", i);
return 0;
}p10
i
i= 10
i= 20포인터를 통하여 변
수의값을변경한다 . 
<18>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved중간점검
1.메모리는 어떤단위를 기준으로 주소가 매겨지는가 ?
2.다음의 각자료형이 차지하는 메모리 공간의 크기를 쓰시오 .
3. (a) char (b) short (c) int(d) long (e) float (f) double
4.포인터도 변수인가 ?
5.변수의 주소를 추출하는데 사용되는 연산자는 무엇인가 ?
6.변수 x의주소를 추출하여 변수 p에대입하는 문장을 쓰시오 .
7.정수형 포인터 p가가리키는 위치에 25를저장하는 문장을 쓰시오 .

<19>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved포인터사용시주의점
초기화가 안된포인터를 사용하면 안된다 .
intmain( void) 
{ 
int*p; // 포인터 p는초기화가 안되어 있음
*p = 100; // 위험한 코드
return 0;
}

<20>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved포인터사용시주의점
포인터가 아무것도 가리키고 있지않는경우에는 NULL로초기화
NULL 포인터를 가지고 간접참조하면 하드웨어로 감지할 수있다. 
int*p = NULL; 
<21>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved포인터사용시주의점
포인터의 타입과 변수의 타입은 일치하여야 한다.
#include <stdio.h >
intmain( void)
{
inti;
double *pd;
pd= &i; // 오류! double형포인터에 int형변수의주소를 대입
*pd= 36.5;
return 0;
}
<22>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved중간점검
1.초기값이 결정되지 않은포인터에는 어떤값을넣어두는 것이안전한가 ?
2.char형변수에 double 형포인터로 값을저장한다면 어떤문제가 발생하는가 ? 

<23>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved포인터연산
가능한 연산: 증가, 감소, 덧셈, 뺄셈연산
증가연산의 경우증가되는 값은포인터가 가리키는 객체의 크기

<24>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved증가연산예제
#include <stdio.h >
intmain( void)
{
char *pc; 
int*pi;
double *pd;
pc = ( char *)10000;
pi = ( int*)10000;
pd= (double *)10000;
printf ("증가전pc = %d,  pi = %d,  pd= %d\n", pc, pi, pd);
pc++;
pi++;
pd++;
printf ("증가후pc = %d,  pi = %d,  pd= %d\n", pc, pi, pd);
printf (“pc+2 = %d, pi+2 = %d, pd+2 = %d \n”, pc+2, pi+2, pd+2);
return 0;
}
증가전pc=10000 ,pi=10000 ,pd=10000
증가후pc=10001 ,pi=10004 ,pd=10008
pc+2=10003 ,pi+2=10012 ,pd+2=10024
<25>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved포인터의증감연산

<26>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved간접참조연산자와증감연산자
*p++;
p가가리키는 위치에서 값을가져온 후에 p를증가한다 . 
(*p)++;
p가가리키는 위치의 값을증가한다 .
수식 의미
v=*p++ p가가리키는값을v에대입한후에p를증가한다 .
v=(*p)++ p가가리키는값을v에대입한후에가리키는값을증가한다 .
v=*++p p를증가시킨후에p가가리키는값을v에대입한다 .
v=++*p p가가리키는값을가져온후에그값을증가하여 v에대입한다 .
<27>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved간접참조연산자와증감연산자
#include <stdio.h >
intmain( void)
{
inti= 10;
int*pi = & i;
printf ("i= %d,  pi = %p \n", i, pi);
(*pi)++;
printf ("i= %d,  pi = %p \n", i, pi);
printf ("i= %d,  pi = %p \n", i, pi);
*pi++;
printf ("i= %d,  pi = %p \n", i, pi);
return 0;
}
i=10,pi=0012FF60
i=11,pi=0012FF60
i=11,pi=0012FF60
i=11,pi=0012FF64pi가가리키는 위치의 값을증가한다 . 
pi가가리키는 위치에서 값을가져온 후에 pi를증가한
다. 
<28>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved포인터의형변환
C언어에서는 꼭필요한 경우에 , 명시적으로 포인터의 타입을 변경할
수있다.
double *pd = &f;
int *pi ;
pi = (int *)pd;
<29>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved예제
#include < stdio.h >
intmain(void)
{
intdata = 0x0A0B0C0D;
char *pc;
pc = (char *)&data;
for (inti= 0; i< 4; i++) {
printf (“*(pc + %d) = %02X \n”, i, *(pc + i));
}
return 0;
}
*(pc+0)=0D
*(pc+1)=0C
*(pc+2)=0B
*(pc+3)=0A
<30>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved중간점검
1.포인터에 대하여 적용할 수있는연산에는 어떤것들이 있는가 ?
2.int형포인터 p가80번지를 가리키고 있었다면 (p+1)은몇번지를 가리키는
가?
3.p가포인터라고 하면 *p++와(*p)++ 의차이점은 무엇인가 ?
4.p가포인터라고 하면 *(p+3)의의미는 무엇인가 ?

<31>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved인수전달방법
함수호출시에인수전달방법
값에의한호출(call by value) 
함수로 복사본이 전달된다 .
기본적인 방법
참조에 의한호출(call by reference) 
함수로 원본이 전달된다 . 
C에서는 포인터를 이용하여 흉내낼수있다.

<32>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reservedswap() 함수#1(값에의한호출) 
#include <stdio.h >
voidswap( intx, inty);
intmain( void)
{
inta = 100, b = 200;
printf(“a=%d b=%d \n”,a, b );
swap(a, b);
printf(“a=%d b=%d \n”,a, b);
return 0;
}voidswap( intx, inty)
{
inttmp;
printf (“x=%d y=%d \n”,x, y );
tmp= x;
x = y;
y = tmp;
printf (“x=%d y=%d \n”,x, y );
}
a=100b=200
x=100y=200
x=200y=100
a=100b=200
<33>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved값에의한호출

<34>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reservedswap() 함수#2(참조에의한호출)
#include <stdio.h >
voidswap( intx, inty);
intmain( void)
{
inta = 100, b = 200;
printf(“a=%d b=%d \n”,a, b );
swap(&a, &b);
printf(“a=%d b=%d \n”,a, b);
return 0;
}voidswap( int*px, int*py)
{
inttmp;
tmp= *px;
*px= *py;
*py= tmp;
}
a=100b=200
a=200b=100
<35>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved참조에의한호출

<36>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reservedscanf() 함수
변수에 값을저장하기 위하여 변수의 주소를 받는다 . 

<37>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved2개이상의결과를반환
#include <stdio.h >
// 기울기와 y절편을계산
intget_line_parameter (intx1, inty1, intx2, inty2, float *slope, float *yintercept )
{
if( x1 == x2 ) 
return -1;
else{
*slope = ( float)(y2 -y1)/( float)(x2 -x1);
*yintercept = y1 -(*slope)*x1;
return 0;
}
}
intmain( void)
{
float s, y;
if( get_line_parameter (3,3,6,6,& s,&y) == -1 )
printf ("에러\n");
else
printf ("기울기는 %f, y절편은 %f\n", s, y);
return 0;
}기울기와 Y절편을
인수로 전달
기울기는 1.000000 ,y절편은 0.000000
<38>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved포인터와배열
배열과 포인터는 아주밀접한 관계를 가지고 있다. 
배열이름이 바로포인터이다 .
포인터는 배열처럼 사용이 가능하다 . 
배열 포인터[0] [1]a
[2] [3] [4] [5] [6] [7] [8]
p배열
포인터
<39>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved포인터와배열
// 포인터와 배열의 관계
#include <stdio.h >
intmain( void)
{
inta[] = { 10, 20, 30, 40, 50 };
printf ("&a[0] = %u \n", &a[0]); 
printf ("&a[1] = %u \n", &a[1]); 
printf ("&a[2] = %u \n", &a[2]); 
printf ("a = %u \n", a); 
return 0;
}
&a[0]=1245008
&a[1]=1245012
&a[2]=1245016
a=1245008

<40>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved예제
// 포인터와 배열의 관계
#include < stdio.h >
intmain(void)
{
inta[] = { 10, 20, 30, 40, 50 };
printf (“a = %u \n”, a);
printf (“a + 1 = %u \n”, a + 1);
printf (“*a = %d \n”, *a);
printf (“*(a+1) = %d \n”, *(a+1));
return 0;
}
a=1245008
a+1=1245012
*a=10
*(a+1)=20
<41>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved포인터와배열
포인터는 배열처럼 사용할 수있다. 
인덱스 표기법을 포인터에 사용할 수있다. 

<42>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved포인터를배열처럼사용
#include <stdio.h >
intmain( void)
{
inta[] = { 10, 20, 30, 40, 50 };
int*p;
p = a;
printf ("a[0]=%d a[1]=%d a[2]=%d \n", a[0], a[1], a[2]);
printf ("p[0]=%d p[1]=%d p[2]=%d \n\n", p[0], p[1], p[2]);
p[0] = 60;
p[1] = 70;
p[2] = 80;
printf ("a[0]=%d a[1]=%d a[2]=%d \n", a[0], a[1], a[2]);
printf ("p[0]=%d p[1]=%d p[2]=%d \n", p[0], p[1], p[2]);
return 0;
}
a[0]=10a[1]=20a[2]=30
p[0]=10p[1]=20p[2]=30
a[0]=60a[1]=70a[2]=80
p[0]=60p[1]=70p[2]=80배열은 결국포인터로
구현된다는 것을알수
있다.
포인터을 통하여 배열
원소를 변경할 수있다.
<43>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved배열매개변수
일반매개변수 vs배열매개변수
Why? -> 배열을 함수로 복사하려면 많은시간소모// 매개변수 x에기억장소가할당
voidsub(intx)
{
...
}// b에기억장소가할당되지 않는다 .
voidsub( intb[] )
{
...
}
<44>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved배열매개변수
배열매개변수는 포인터로 생각할 수있다. 

<45>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved// 포인터와 함수의 관계
#include < stdio.h >
void sub( intb[], intn);
intmain(void)
{
inta[3] = { 1,2,3 };
printf ("%d %d %d \n", a[0], a[1], a[2]);
sub(a, 3);
printf ("%d %d %d \n", a[0], a[1], a[2]);
return 0;
}
void sub( intb[], intn)
{
b[0] = 4;
b[1] = 5;
b[2] = 6;
}
123
456
<46>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved다음2가지방법은완전히동일하다 .

<47>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved포인터를사용한방법의장점
포인터가 인덱스 표기법보다 빠르다 .
Why?: 인덱스를 주소로 변환할 필요가 없다. 
intget_sum1( inta[], intn)
{
inti;
intsum = 0;
for(i= 0; i< n; i++ )
sum += a[ i];
return sum;
}intget_sum2( inta[], intn)
{
inti, sum=0;
int*p;
p = a;
for(i= 0; i< n; i++ )
sum += *p++;
return sum;
}
인덱스 표기법 사용 포인터 사용

<48>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved포인터를반환할때주의점
함수가 종료되더라도 남아있는변수의 주소를 반환하여야 한다.
지역변수의 주소를 반환하면 , 함수가 종료되면 사라지기 때문에 오
류
int*add( intx, inty)
{
intresult;
result = x + y;
return &result;
}
<49>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved중간점검
1.함수에 매개변수로 변수의 복사본이 전달되는 것을 ____________ 라고한
다. 
2.함수에 매개변수로 변수의 원본이 전달되는 것을 ____________ 라고한다. 
3.배열을 함수의 매개변수로 지정하는 경우, 배열의 복사가 일어나는가 ? 

<50>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reservedlab: 영상처리
디지털 이미지는 숫자들의 배열로 생각할 수있다. 
이미지 내의모든픽셀의 값을 10씩증가시켜보자 . 

<51>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved실행결과
모든픽셀
의값이
10씩증가
되었다 .010 020 030 040 050
010 020 030 040 050
010 020 030 040 050
010 020 030 040 050
010 020 030 040 050
020 030 040 050 060
020 030 040 050 060
020 030 040 050 060
020 030 040 050 060
020 030 040 050 060
<52>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reservedlab: 영상처리
#include <stdio.h >
#define SIZE 5
voidprint_image (intimage[][SIZE])
{
intr,c;
for(r=0;r< SIZE;r ++){
for(c=0;c< SIZE;c ++){
printf ("%03d " , image[r][c]);
}
printf ("\n");
}
printf ("\n");
}
<53>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reservedlab: 영상처리
voidbrighten_image (intimage[][SIZE])
{
intr,c;
int*p;
p = &image[0][0];
for(r=0;r< SIZE;r ++){
for(c=0;c< SIZE;c ++){
*p += 10;
p++;
}
}
}
<54>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reservedlab : 영상처리
intmain( void)
{
intimage[5][5] = {
{ 10, 20, 30, 40, 50},
{ 10, 20, 30, 40, 50},
{ 10, 20, 30, 40, 50},
{ 10, 20, 30, 40, 50},
{ 10, 20, 30, 40, 50}};
print_image (image);
brighten_image (image);
print_image (image);
return 0;
}
<55>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved도전문제
포인터를 이용하지 않는버전도 작성하여 보자. 즉배열의 인덱스 표
기법으로 위의프로그램을 변환하여 보자. 

<56>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved중간점검
1.배열의 첫번째원소의 주소를 계산하는 2가지방법을 설명하라 .
2.배열 a[]에서 *a의의미는 무엇인가 ?
3.배열의 이름에 다른변수의 주소를 대입할 수있는가 ?
4.포인터를 이용하여 배열의 원소들을 참조할 수있는가 ?
5.포인터를 배열의 이름처럼 사용할 수있는가 ?

<57>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved
포인터사용의장점
연결리스트나 이진트리등의향상된 자료구조를 만들수있다. 
참조에 의한호출
포인터를 매개변수로 이용하여 함수외부의 변수의 값을변경할
수있다.
동적메모리 할당
17장에서 다룬다 .
<58>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reservedminiproject: 자율주행자동차
자율주행자동차에서 getSensorData () 함수를 호출하여 3개의
double 형데이터를 받아보자 . 
왼쪽센서과 장애물과의 거리: 41.000000
중간센서과 장애물과의 거리: 67.000000
오른쪽 센서과 장애물과의 거리: 34.000000
<59>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved#include < stdio.h >
// 0부터 99까지의 난수(실수형태 )를발생하여 크기가 3인배열 p에저장한다 . 
void getSensorData (double * p) 
{
// 여기를 작성한다 . 
return;
}
intmain(void)
{
double sensorData [3];
getSensorData (sensorData );
printf ("왼쪽센서와 장애물과의 거리: %lf \n", sensorData [0]);
printf ("중간센서와 장애물과의 거리: %lf \n", sensorData [1]);
printf ("오른쪽 센서와 장애물과의 거리: %lf \n", sensorData [2]);
return 0;
} 
<60>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reserved#include < stdio.h >
// 0부터 99까지의 난수(실수형태 )를발생하여 크기가 3인배열 p에저장한다 .
void getSensorData (double * p)
{
p[0] = rand()%100;
p[1] = rand()%100;
p[2] = rand()%100;
return ;
}
intmain(void)
{
double sensorData [3];
getSensorData (sensorData );
printf ("왼쪽센서와 장애물과의 거리: %lf \n", sensorData [0]);
printf ("중간센서와 장애물과의 거리: %lf \n", sensorData [1]);
printf ("오른쪽 센서와 장애물과의 거리: %lf \n", sensorData [2]);
return 0;
} 
<61>
쉽게풀어쓴 C언어 Express© 2012 생능출판사 All rights reservedQ & A
